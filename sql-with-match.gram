Statements <- (SingleStatement (';' SingleStatement )* ';'*)

SingleStatement <- SelectStatement
SelectStatement <- SimpleSelect (SetopClause SimpleSelect)*

SetopClause <- ('UNION'i / 'EXCEPT'i / 'INTERSECT'i) 'ALL'i?

SimpleSelect <- WithClause? SelectClause FromClause? WhereClause? GroupByClause? HavingClause? OrderByClause? LimitClause?


WithStatement <- Identifier 'AS'i SubqueryReference
WithClause <- 'WITH'i List(WithStatement)
SelectClause <- 'SELECT'i ('*' / List(AliasedExpression))
ColumnAliases <- Parens(List(Identifier))


#Name <- (Identifier? ':' Identifier) / Identifier
##Edge <- ('-' / '<-') '[' Name ']' ('-' / '->')
#Pattern <- (NodePattern / EdgePattern)
#Column <- 'COLUMNS' Parens(List(AliasedExpression))
PropertyGraphReference <- 'GRAPH_TABLE'i Parens(Identifier 'MATCH' GraphPattern)
#EdgePattern <-  '[' Name ']'
#NodePattern <- '(' Name ')'
#EdgeDirectionLeft <- '<-' / '-'
#EdgeDirectionRight <- '->' / '-'

GraphPattern <- List(PathPattern) WhereClause?
PathPattern <- PathVariableDeclaration? PathPatternPrefix? PathPatternExpression
PathVariableDeclaration <- Identifier '='
PathPatternPrefix <- PathModePrefix / PathSearchPrefix
PathModePrefix <- PathMode PathOrPaths?
PathMode <- 'WALK'i / 'TRAIL'i / 'SIMPLE'i / 'ACYCLIC'i
PathSearchPrefix <- ShortestPathSearch / AllPathSearch / AnyPathSearch
AllPathSearch <- 'ALL'i PathMode? PathOrPaths?
AnyPathSearch <- 'ANY'i NumberLiteral? PathMode? PathOrPaths?
ShortestPathSearch <- AllShortestPathSearch / AnyShortestPathSearch / CountedShortestPathSearch / CountedShortestGroupSearch
AllShortestPathSearch <- 'ALL'i 'SHORTEST'i PathMode? PathOrPaths?
AnyShortestPathSearch <- 'ANY'i 'SHORTEST'i PathMode? PathOrPaths?
CountedShortestPathSearch <- 'SHORTEST'i NumberLiteral PathMode? PathOrPaths?
CountedShortestGroupSearch <- 'SHORTEST'i NumberLiteral PathMode? PathOrPaths? ('GROUPS'i / 'GROUP'i)?

PathPatternExpression <- PathTerm # / PathMultiSetAlternation / PathPatternUnion
#PathMultiSetAlternation <- PathTerm MultiSetAlternationOperator PathTerm (MultiSetAlternationOperator PathTerm)*
#PathPatternUnion <- PathTerm VerticalBar PathTerm (VerticalBar PathTerm)*
PathTerm <- PathFactor / PathConcatenation
PathConcatenation <- PathTerm PathFactor
PathFactor <- PathPrimary # / QuantifiedPathPrimary / QuestionedPathPrimary
#QuantifiedPathPrimary <- PathPrimary GraphPatternQuantifier
#QuestionedPathPrimary <- PathPrimary '?'i
PathPrimary <- ElementPattern / Parens(PathPatternExpression) # / SimplifiedPathPatternExpression
ElementPattern <- VertexPattern #/ EdgePattern
VertexPattern <- '(' ElementPatternFiller ')'
ElementPatternFiller <- ElementVariableDeclaration? IsLabelExpression? WhereClause?
ElementVariableDeclaration <- Identifier
IsLabelExpression <- IsOrColon LabelExpression
IsOrColon <- 'IS'i / ':'
#EdgePattern <- FullEdgePattern #/ AbbreviatedEdgePattern
#FullEdgePattern <-  FullEdgePointingLeft /
#                                  FullEdgeUndirected /
#                                  FullEdgePointingRight /
#                                  FullEdgeLeftOrUndirected /
#                                  FullEdgeUndirectedOrRight /
#                                  FullEdgeLeftOrRight /
#                                  FullEdgeAnyDirection
#FullEdgePointingLeft <- '<-[' ElementPatternFiller ']-'
#FullEdgeUndirected <- '~[' ElementPatternFiller ']~'
#FullEdgePointingRight <- '-[' ElementPatternFiller ']->'
#FullEdgeLeftOrUndirected <- '<~[' ElementPatternFiller ']~'
#FullEdgeUndirectedOrRight <- '~[' ElementPatternFiller ']~>'
#FullEdgeLeftOrRight <- '<-[' ElementPatternFiller ']->'
#FullEdgeAnyDirection <- '-[' ElementPatternFiller ']-'

#AbbreviatedEdgePattern <- LeftArrow /
#Tilde /
#RightArrow /
#LeftArrowTilde /
#TildeRightArrow /
#LeftMinusRight /
#MinusSign

#ParenthesizedPathPatternExpression <- '(' SubpathVariableDeclaration? PathModePrefix? PathPatternExpression WhereClause? ')'
#SubpathVariableDeclaration <- Identifier '='



PathOrPaths <- ('PATHS'i / 'PATH'i)

TableReference <-
    PropertyGraphReference /
    (SubqueryReference 'AS'i? Identifier ColumnAliases?) /
    (Identifier ('AS'i? Identifier)?)

ExplicitJoin <- ('LEFT'i / 'FULL'i)? 'OUTER'i? 'JOIN'i TableReference 'ON'i Expression

FromClause <- 'FROM'i TableReference ((',' TableReference) / ExplicitJoin)*


WhereClause <- 'WHERE'i Expression
GroupByClause <- 'GROUP'i 'BY'i List(Expression)
HavingClause <- 'HAVING'i Expression

SubqueryReference <- Parens(SelectStatement)

OrderByExpression <- Expression ('DESC'i / 'ASC'i)?  ('NULLS'i 'FIRST'i / 'LAST'i)?
OrderByClause <- 'ORDER'i 'BY'i List(OrderByExpression)

LimitClause <- 'LIMIT'i NumberLiteral

ReservedKeyword <-
    'SELECT'i      /
    'FROM'i        /
    'WHERE'i       /
    'GROUP'i 'BY'i /
    'HAVING'i      /
    'UNION'i       /
    'ORDER'i 'BY'i /
    'WHEN'i        /
    'JOIN'i        /
    'ON'i /
    'GRAPH_TABLE'i /
    'SHORTEST'i /
    'INTERSECT'i # TODO expand on this

PlainIdentifier <-  !ReservedKeyword <[a-z_]i[a-z0-9_]i*>  # unqoted identifier can't be top-level keyword
QuotedIdentifier <- '"' [^"]* '"'
Identifier <- QuotedIdentifier / PlainIdentifier
NumberLiteral      <- < [+-]?[0-9]*([.][0-9]*)? >
StringLiteral <- '\'' [^\']* '\''
TypeSpecifier <- Identifier (Parens(List(NumberLiteral)))?

ColumnReference <- (Identifier '.')?Identifier
FunctionExpression <- Identifier Parens(List(Expression))
ParenthesisExpression <- Parens(Expression)
LiteralExpression <- StringLiteral / NumberLiteral
CastExpression <- 'CAST'i Parens(Expression 'AS'i TypeSpecifier)
ExtractExpression <- 'EXTRACT'i Parens(ColumnReference 'FROM'i Expression)
CountStarExpression <- 'COUNT'i Parens('*')
SubqueryExpression <- 'NOT'i? 'EXISTS'i? SubqueryReference
CaseExpression <- 'CASE'i ColumnReference? 'WHEN'i Expression 'THEN'i Expression ('ELSE'i Expression)? 'END'i # TODO strict
DateExpression <- 'DATE'i Expression
DistinctExpression <- 'DISTINCT'i Expression
SubstringExpression <- 'SUBSTRING'i Parens(Expression 'FROM'i NumberLiteral 'FOR'i NumberLiteral)
LiteralListExpression <- Parens(List(Expression))
FrameClause <- 'ROWS'i 'BETWEEN'i (('UNBOUNDED'i 'PRECEDING'i)) 'AND' (('CURRENT'i 'ROW'i))
WindowExpression <- Parens(('PARTITION'i 'BY'i List(Expression))? OrderByClause? FrameClause?)
IsNullExpression <- ColumnReference 'IS'i 'NOT'i? 'NULL'i # TODO

SingleExpression <-
    SubqueryExpression /
    LiteralListExpression /
    ParenthesisExpression /
    DateExpression /
    DistinctExpression /
    SubstringExpression /
    IsNullExpression /
    CaseExpression /
    CountStarExpression /
    CastExpression /
    ExtractExpression /
    WindowExpression /
    FunctionExpression /
    ColumnReference /
    LiteralExpression

ArithmeticOperator <- '+' / '-' / '*' / '/'
LikeOperator <- 'NOT'i? 'LIKE'i
InOperator <- 'NOT'i? 'IN'i !'T'i # special handling to not match INTERSECT
BooleanOperator <- ('OR'i !'D'i) / 'AND'i # special handling to not match ORDER BY
ComparisionOperator <-  '=' / '<=' / '>=' / '<' / '>'
WindowOperator <- 'OVER'i
BetweenOperator <- 'BETWEEN'i
VerticalBar <- '|'i

Operator <-
    ArithmeticOperator /
    ComparisionOperator /
    BooleanOperator /
    LikeOperator /
    InOperator /
    WindowOperator /
    BetweenOperator

Expression <- SingleExpression (Operator SingleExpression)*
AliasedExpression <- Expression ('AS'i? Identifier)?

# internal definitions
%whitespace <- [ \t\n\r]*
List(D) <- D (',' D)*
Parens(D) <- '(' D ')'